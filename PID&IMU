
//This Arduino code implements a control system, specifically a Proportional-Integral-Derivative (PID) controller, to control the position of a servo motor 
based on sensor inputs from an Inertial Measurement Unit (IMU) and altitude sensor. 
Here's a breakdown of the main components and functionalities:

Libraries and Constants:

The code includes two libraries: Servo.h for servo motor control and SITL.h, which presumably provides simulation capabilities.
Constants are defined for conversion between degrees and radians, as well as some PID-related parameters and physical constraints.
Global Variables:

Various variables are declared to hold sensor data, PID parameters, timing information, and servo control variables.
Setup Function:

setup() function initializes serial communication, attaches the servo to a pin, sets its initial position to 90 degrees, and starts the SITL simulation.
Loop Function:

The loop() function runs continuously and is time-triggered with a fixed sample time.
It reads sensor data from the simulation (presumably representing an IMU and altitude sensor).
The angle is calculated by integrating gyroscope data over time.
The PID controller computes the control signal (out) based on the difference between the desired setpoint and the current angle (theta).
The control signal is then converted to a servo command and sent to the servo motor.
Additionally, there's a provision for deploying a parachute based on altitude conditions.
PID Function (PID()):

This function computes the output of the PID controller based on the setpoint and current input.
It calculates proportional, integral, and derivative terms and combines them to produce the control output.
PID to Servo Conversion Function (PID2Servo()):

This function scales the PID output to fit within the servo's operating range, considering actuator reduction and saturation limits.
Parachute Deployment Function (Deploy_Parachute()):

This function determines whether to deploy a parachute based on altitude conditions.










#include <Servo.h>
#include <SITL.h>

SITL Sim;
Servo servo;

double DEG2RAD = 3.14159265/180;
double RAD2DEG = 180/3.14159265;

// Sample Time
double T_Program = 0.01;
unsigned long T_Program_micros = T_Program * 1000000;
unsigned long timer_run;

// PID
unsigned long currentTime, previousTime;
double elapsedTime,elapsedTimeSeg;
double errorPID;
double lastError;
double input, output, setPoint;
double cumError, rateError;
double okp, oki, okd;
float kp = 0.4;
float ki = 0.0;
float kd = 0.136;
double out;

// Saturation and Real Actuator
double Actuator_reduction = 5;
double Max_Actuator_Angle = 10 * DEG2RAD;
double Max_servo_Angle = Max_Actuator_Angle * Actuator_reduction;

// SinL
float theta, servo_command, Alt_prev;
int parachute = 0;
float GyroY, AccX, AccZ, Alt;

void setup() {
  Serial.begin(1000000);   
  servo.attach(10);
  servo.write(90);
  Sim.StartSITL();
}

void loop() {
// Sample time
if (micros() >= timer_run + T_Program_micros){  
  double dt = double(micros() - timer_run);
  // micros to seconds
  dt /= 1000000;
  timer_run = micros();  

  // SinL Simulation
  Sim.getSimData(GyroY, AccX, AccZ, Alt);

  // Integrate the Gyros to find the angle.
  theta += (GyroY * DEG2RAD) * dt;

  double setpoint = 10 * DEG2RAD;
  out = PID(setpoint, theta);
  servo_command = PID2Servo(out);
  
  // Parachute
  parachute = Deploy_Parachute(Alt);

  // Real servo
  double servo_center = 90;
  servo.write(-servo_command + servo_center); 
   
  // Simulated servo and parachute
  Sim.sendCommand(servo_command, parachute); 
  }
}


double PID(double set_point, double inp){
  currentTime = micros();  //get current time
  elapsedTime = (double)(currentTime - previousTime);  // compute time elapsed from previous computation
  elapsedTimeSeg = elapsedTime / 1000000;
    
  errorPID = set_point - inp;  // determine error
  rateError = (errorPID - lastError) / (elapsedTimeSeg);  // compute derivative
  cumError += ((((lastError) + ((errorPID - lastError) / 2))) * elapsedTimeSeg);  // compute integral
  out = kp * errorPID + ki * cumError + kd * rateError;
  
  lastError = errorPID;  //remember current error
  previousTime = currentTime;  //remember current time
  return out;
  }

double PID2Servo(double out){
  // Actuator  
  double servo_command = out * Actuator_reduction;
  
  // Saturation
  if(servo_command > Max_servo_Angle){servo_command = Max_servo_Angle;}
  if(servo_command < -Max_servo_Angle){servo_command = -Max_servo_Angle;}
  servo_command *= RAD2DEG;
  return servo_command;  
}

int Deploy_Parachute (double Alt){
  // No noise pls
  if (Alt > 10 and Alt_prev > Alt)
  {
    parachute = 1;
  }
  Alt_prev = Alt;
  return parachute; 
}
 
